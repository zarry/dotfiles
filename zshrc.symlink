# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="gianu"
#ZSH_THEME="amuse"
#ZSH_THEME="gentoo"
#ZSH_THEME="kphoen"
ZSH_THEME="powerlevel9k/powerlevel9k"

#Powerline
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status history time)
POWERLEVEL9K_MODE='awesome-patched'

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable command autocorrection
DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git ruby)

source $ZSH/oh-my-zsh.sh

# The next line updates PATH for the Google Cloud SDK.
source '/Users/lzarou/google-cloud-sdk/path.zsh.inc'

# The next line enables bash completion for gcloud.
source '/Users/lzarou/google-cloud-sdk/completion.zsh.inc'

### FUNCTIONS
fliptable() { echo "（╯°□°）╯ ┻━┻"; } # Flip a table. Example usage: fsck -y /dev/sdb1 || fliptable
happydance() {
	echo ";D=-<\n"
	echo ";D|-<\n"
	echo ";D\-<\n"
	echo ";D|-<\n"
	echo ";D/-<\n"
	echo ";D|-<\n"
}
disco() {
	echo "(•_•)"
	echo "<)   )╯"
	echo " /    \ "
	echo ""
	echo "\(•_•)"
	echo " (   (>"
	echo " /    \ "
	echo ""
	echo " (•_•)"
	echo "<)   )>"
	echo " /    \ "
}
monocle() {
	echo "ಠ_ರೃ\n"
}
snow() {
	clear;while :;do echo $LINES $COLUMNS $(($RANDOM%$COLUMNS));sleep 0.1;done|gawk '{a[$3]=0;for(x in a) {o=a[x];a[x]=a[x]+1;printf "\033[%s;%sH ",o,x;printf "\033[%s;%sH*\033[0;0H",a[x],x;}}'
}
csiyeah() {
	echo "(•_•) , ( •_•)>⌐■-■ , (⌐■_■)"
}
lint() {
	if [ $1 ]; then
		target=$1
	else
		target="."
	fi
	if [ `which rubocop` ]; then
		echo "Running RuboCop";
		rubocop $target;
	else
		echo "\nWARNING: RuboCop is not installed\n";
	fi
	if [ `which foodcritic` ]; then
		echo "\nRunning Foodcritic\n";
		foodcritic $target;
	else
		echo "\nWARNING: FoodCritic is not installed\n";
	fi
}

### ALIASES
alias bigdirs='du --max-depth=1 2> /dev/null | sort -n -r | head -n20'
alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
alias vlist='VboxManage list runningvms'
alias vcycle="vagrant destroy -f && vagrant up"
alias flushdns="sudo discoveryutil udnsflushcaches"
alias fuck='$(thefuck $(fc -ln -1))'
alias FUCK='fuck'
alias mvim="/Applications/MacVim.app/contents/MacOS/MacVim %1 &"
alias solr_start='solr start -s /Users/lzarou/projects/buyspace/solr/cores'
alias mongod_start='mongod --config /usr/local/etc/mongod.conf'
alias java7="export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)"
alias java8="export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0_45)"

export EDITOR='vim'

## Chef-DK
export PATH="/opt/chefdk/bin:/Users/lzarou/.chefdk/gem/ruby/2.3.0/bin:/opt/chefdk/embedded/bin:/opt/chefdk/bin:/Users/lzarou/.chefdk/gem/ruby/2.3.0/bin:/opt/chefdk/embedded/bin:/Users/lzarou/bin/mongodb/bin:$PATH"
export GEM_ROOT="/opt/chefdk/embedded/lib/ruby/gems/2.3.0"
export GEM_HOME="/Users/lzarou/.chefdk/gem/ruby/2.3.0"
export GEM_PATH="/Users/lzarou/.chefdk/gem/ruby/2.3.0:/opt/chefdk/embedded/lib/ruby/gems/2.3.0"
function _chef() {

  local -a _1st_arguments
  _1st_arguments=(
      'exec:Runs the command in context of the embedded ruby'
      'env:Prints environment variables used by ChefDK'
      'gem:Runs the `gem` command in context of the embedded ruby'
      'generate:Generate a new app, cookbook, or component'
      'shell-init:Initialize your shell to use ChefDK as your primary ruby'
      'install:Install cookbooks from a Policyfile and generate a locked cookbook set'
      'update:Updates a Policyfile.lock.json with latest run_list and cookbooks'
      'push:Push a local policy lock to a policy group on the server'
      'push-archive:Push a policy archive to a policy group on the server'
      'show-policy:Show policyfile objects on you Chef Server'
      'diff:Generate an itemized diff of two Policyfile lock documents'
      'provision:Provision VMs and clusters via cookbook'
      'export:Export a policy lock as a Chef Zero code repo'
      'clean-policy-revisions:Delete unused policy revisions on the server'
      'clean-policy-cookbooks:Delete unused policyfile cookbooks on the server'
      'delete-policy-group:Delete a policy group on the server'
      'delete-policy:Delete all revisions of a policy on the server'
      'undelete:Undo a delete command'
      'verify:Test the embedded ChefDK applications'
    )

  _arguments \
    '(-v --version)'{-v,--version}'[version information]' \
    '*:: :->subcmds' && return 0

  if (( CURRENT == 1 )); then
    _describe -t commands "chef subcommand" _1st_arguments
    return
  fi
}

compdef _chef chef

## Grails
export GRAILS_OPTS="-server -Xmx1536M -Xms1536M -XX:PermSize=1024m -XX:MaxPermSize=1024m -Dfile.encoding=UTF-8"

## GO
export GOPATH=$HOME/projects/go
export PATH=$PATH:$GOPATH/bin

## Terraform
export PATH=$PATH:$HOME/terraform

### Mac cursor commands for iTerm2; map ctrl+arrows or alt+arrows to fast-move
# for ctrl+arrows:
#"\e[1;5D": backward-word
#"\e[1;5C": forward-word
# for alt+arrows:
bindkey -e
bindkey '^[[1;9C' forward-word
bindkey '^[[1;9D' backward-word

#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!
[[ -s "/Users/lzarou/.gvm/bin/gvm-init.sh" ]] && source "/Users/lzarou/.gvm/bin/gvm-init.sh"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
